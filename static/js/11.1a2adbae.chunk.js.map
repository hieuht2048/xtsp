{"version":3,"sources":["containers/Categories/Labels/NuocHoa.js","containers/Detail/selectors.js","containers/Detail/initialState.js","containers/Detail/reducer.js","containers/Detail/saga.js","components/commons/LoadingComponent.js","containers/Categories/initialState.js","containers/Home/PostsList.js","containers/Detail/LatestPosts.js","containers/Categories/reducer.js","containers/Categories/saga.js","containers/Categories/selectors.js","containers/Detail/SamePosts.js","containers/Comments.js","containers/Detail/index.js"],"names":["NuocHoa","getPosts","_callee","_this$props","C_Users_hieuh_Desktop_Projects_xtsp_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","_this","props","resetPosts","label","stop","handleSelectPost","selectedPost","selectPost","id","this","_this2","_this$props2","posts","match","home","history","data","waiting","react__WEBPACK_IMPORTED_MODULE_7___default","createElement","className","_components_commons_Loading__WEBPACK_IMPORTED_MODULE_21__","size","_material_ui_core__WEBPACK_IMPORTED_MODULE_15__","react_helmet__WEBPACK_IMPORTED_MODULE_12__","name","content","property","window","location","href","ogImg","fb_app_id","rel","react_router_dom__WEBPACK_IMPORTED_MODULE_8__","to","react_router_dom__WEBPACK_IMPORTED_MODULE_9__","react_router_dom__WEBPACK_IMPORTED_MODULE_10__","path","concat","url","component","Detail","render","_Home_PostsList__WEBPACK_IMPORTED_MODULE_18__","Object","assign","onHandleSelectPost","NotFound","container","_Detail_LatestPosts__WEBPACK_IMPORTED_MODULE_27__","_Detail_SamePosts__WEBPACK_IMPORTED_MODULE_28__","Component","defaultProps","mapStateToProps","createStructuredSelector","makeSelectPosts","makeSelectSelectedPost","mapDispatchToProps","withConnect","connect","withReducer","injectReducer","key","reducer","withSaga","injectSaga","saga","compose","__webpack_require__","d","__webpack_exports__","makeSelectSamePosts","makeSelectPost","makeSelectLatestPosts","reselect__WEBPACK_IMPORTED_MODULE_0__","_initialState__WEBPACK_IMPORTED_MODULE_1__","detailSelector","state","get","initialState","createSelector","toJS","immutable__WEBPACK_IMPORTED_MODULE_0__","fromJS","samePosts","error","post","latestPosts","_initialState__WEBPACK_IMPORTED_MODULE_0__","_consts__WEBPACK_IMPORTED_MODULE_1__","arguments","length","undefined","action","type","consts","setIn","set","getSamePostsSaga","getLatestPostsSaga","getSelectedPostSaga","root","_ref","payload","postsIncludedImages","postsIncludedPrice","postsIncludedCurrency","call","services","sent","utils","getImages","items","getPrice","getCurrency","all","put","t0","response","_marked","_context2","getLatestPost","_marked2","_ref2","_context3","getSelectedPost","_marked3","_context4","takeLatest","_marked4","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_LinearProgress__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_LinearProgress__WEBPACK_IMPORTED_MODULE_2___default","withStyles","flexGrow","classes","color","PostsList","resetSelectedPost","clearSearch","getHomePosts","saveKeyword","pageToken","keyword","viewMore","ev","preventDefault","_this$props3","getMorePosts","_this$props4","isSearch","_this$props5","nextPageToken","react__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_8___default","spacing","map","labels","postUrl","Utils","convertStringToURL","title","uri","item","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","onClick","src","images","alt","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_9___default","gutterBottom","variant","price","currency","_material_ui_core__WEBPACK_IMPORTED_MODULE_10__","makeSelectNextPageToken","LatestPosts","getLatestPosts","latestPostsFiltered","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_10___default","_components_commons_LoadingComponent__WEBPACK_IMPORTED_MODULE_15__","cloneDeep","filter","pop","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_11___default","updateIn","obj","C_Users_hieuh_Desktop_Projects_xtsp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","C_Users_hieuh_Desktop_Projects_xtsp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","category","getPostsSaga","setNextPageToken","takeEvery","labelsSelector","SamePosts","samePostsFiltered","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_9___default","_components_commons_LoadingComponent__WEBPACK_IMPORTED_MODULE_16__","limitOtherPosts","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_10___default","FBComments","react_default","Grid_default","lib","appId","width","classCallCheck","possibleConstructorReturn","getPrototypeOf","setPageNotFound","setState","PageNoFound","params","postId","getIdFromURL","prevProps","getSamePosts","limit","clearTimeout","timeoutID","Loading","Helmet","titleTemplate","xs","renderHTML","Comments"],"mappings":"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","file":"static/js/11.1a2adbae.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route, Switch, Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Helmet } from 'react-helmet';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport { getPosts, resetPosts } from '../actions';\r\nimport { selectPost } from '../../Detail/actions';\r\n\r\nimport PostsList from '../../Home/PostsList';\r\nimport Detail from '../../Detail';\r\nimport NotFound from '../../commons/NotFound';\r\nimport Loading from '../../../components/commons/Loading';\r\n\r\nimport injectReducer from '../../../utils/injectReducer';\r\nimport injectSaga from '../../../utils/injectSaga';\r\n\r\nimport reducer from '../reducer';\r\nimport saga from '../saga';\r\nimport { makeSelectPosts } from '../selectors';\r\nimport LatestPosts from '../../Detail/LatestPosts';\r\nimport SamePosts from '../../Detail/SamePosts';\r\nimport { makeSelectSelectedPost } from '../../Detail/selectors';\r\n\r\nimport { fb_app_id } from '../../../configs';\r\nimport ogImg from '../../../assets/images/og-img.jpg';\r\n\r\nclass NuocHoa extends Component {\r\n    componentDidMount() {\r\n        this.getPosts();\r\n    }\r\n\r\n    getPosts = async () => {\r\n        const { getPosts, resetPosts } = this.props;\r\n        resetPosts();\r\n        getPosts({ label: 'nuoc-hoa' });\r\n    };\r\n\r\n    handleSelectPost = selectedPost => {\r\n        const { selectPost } = this.props;\r\n        selectPost(selectedPost.id);\r\n    };\r\n\r\n    render() {\r\n        const { posts, match, home, history, selectedPost } = this.props;\r\n        let data = [];\r\n        if (posts.waiting) {\r\n            return (\r\n                <div className=\"loading-wrp\">\r\n                    <Loading size={22} />\r\n                </div>\r\n            );\r\n        }\r\n        if (posts.data['nuoc-hoa']) {\r\n            data = posts.data['nuoc-hoa'];\r\n            return (\r\n                <Grid className={!home ? 'list-box category' : 'list-box'}>\r\n                    {!home && (\r\n                        <Helmet>\r\n                            <title>Nước Hoa Nhập Khẩu chính hãng</title>\r\n                            <meta\r\n                                name=\"description\"\r\n                                content=\"Các loại nước Hoa Nhập Khẩu chính hãng\"\r\n                            />\r\n                            <meta\r\n                                property=\"og:url\"\r\n                                content={window.location.href}\r\n                            />\r\n                            <meta property=\"og:type\" content=\"website\" />\r\n                            <meta\r\n                                property=\"og:title\"\r\n                                content=\"www.xitashop.com | Nước Hoa Nhập Khẩu chính hãng\"\r\n                            />\r\n                            <meta property=\"og:image\" content={ogImg} />\r\n                            <meta\r\n                                property=\"og:description\"\r\n                                content=\"Các loại nước Hoa Nhập Khẩu chính hãng\"\r\n                            />\r\n                            <meta property=\"fb:app_id\" content={fb_app_id} />\r\n                            <link rel=\"canonical\" href={window.location.href} />\r\n                        </Helmet>\r\n                    )}\r\n                    <div\r\n                        className={\r\n                            !home ? 'container-left main-ct-left' : 'list'\r\n                        }\r\n                    >\r\n                        <Grid className=\"box-header\">\r\n                            <h2 className=\"\">Nước hoa nhập khẩu</h2>\r\n                            {home && (\r\n                                <span className=\"view-more\">\r\n                                    <Link to=\"/nuoc-hoa\">Xem toàn bộ</Link>\r\n                                </span>\r\n                            )}\r\n                        </Grid>\r\n                        <Switch>\r\n                            <Route\r\n                                path={`${match.url}/:id`}\r\n                                component={Detail}\r\n                            />\r\n                            <Route\r\n                                path={`${match.url}/`}\r\n                                render={props => (\r\n                                    <PostsList\r\n                                        {...props}\r\n                                        home={home}\r\n                                        posts={data}\r\n                                        onHandleSelectPost={\r\n                                            this.handleSelectPost\r\n                                        }\r\n                                    />\r\n                                )}\r\n                            />\r\n                            <Route component={NotFound} />\r\n                        </Switch>\r\n                    </div>\r\n                    {!home && (\r\n                        <div className=\"container-right main-ct-right\">\r\n                            <Grid container className=\"right-box\">\r\n                                <h3>Mới nhất</h3>\r\n                                <LatestPosts\r\n                                    history={history}\r\n                                    selectedPost={false}\r\n                                    onHandleSelectPost={this.handleSelectPost}\r\n                                />\r\n                            </Grid>\r\n                            {selectedPost && (\r\n                                <Grid container className=\"right-box\">\r\n                                    <h3>Sản phẩm liên quan</h3>\r\n                                    <SamePosts\r\n                                        history={history}\r\n                                        onHandleSelectPost={\r\n                                            this.handleSelectPost\r\n                                        }\r\n                                    />\r\n                                </Grid>\r\n                            )}\r\n                        </div>\r\n                    )}\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return 'No data available';\r\n        }\r\n    }\r\n}\r\n\r\nNuocHoa.propTypes = {\r\n    posts: PropTypes.object.isRequired,\r\n    getPosts: PropTypes.func.isRequired,\r\n    selectPost: PropTypes.func.isRequired,\r\n    match: PropTypes.object.isRequired,\r\n    history: PropTypes.object.isRequired,\r\n    resetPosts: PropTypes.func.isRequired,\r\n    home: PropTypes.bool,\r\n    selectedPost: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\r\n        .isRequired\r\n};\r\n\r\nNuocHoa.defaultProps = {\r\n    home: false\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    posts: makeSelectPosts(),\r\n    selectedPost: makeSelectSelectedPost()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getPosts,\r\n    selectPost,\r\n    resetPosts\r\n};\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\nconst withReducer = injectReducer({ key: 'labelsReducer', reducer });\r\nconst withSaga = injectSaga({ key: 'labelsSaga', saga });\r\n\r\nexport default compose(\r\n    withReducer,\r\n    withSaga,\r\n    withConnect\r\n)(NuocHoa);\r\n","import { createSelector } from 'reselect';\r\nimport initialState from './initialState';\r\n\r\nconst detailSelector = state => state.get('detailReducer', initialState);\r\n\r\nconst makeSelectSamePosts = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('samePosts').toJS()\r\n    );\r\n\r\nconst makeSelectPost = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('post').toJS()\r\n    );\r\n\r\nconst makeSelectLatestPosts = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('latestPosts').toJS()\r\n    );\r\n\r\nconst makeSelectSelectedPost = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('selectedPost')\r\n    );\r\n\r\nexport {\r\n    makeSelectSamePosts,\r\n    makeSelectPost,\r\n    makeSelectLatestPosts,\r\n    makeSelectSelectedPost\r\n};\r\n","import { fromJS } from 'immutable';\r\n\r\nexport default fromJS({\r\n    samePosts: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    post: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    latestPosts: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    selectedPost: false\r\n});\r\n","import initialState from './initialState';\r\nimport * as consts from './consts';\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case consts.GET_SAME_POSTS_REQUEST:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], true)\r\n                .setIn(['samePosts', 'error'], false);\r\n        case consts.GET_SAME_POSTS_SUCCESS:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], false)\r\n                .setIn(['samePosts', 'error'], false)\r\n                .setIn(['samePosts', 'data'], action.samePosts);\r\n        case consts.GET_SAME_POSTS_ERROR:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], false)\r\n                .setIn(['samePosts', 'error'], action.error)\r\n                .setIn(['samePosts', 'data'], false);\r\n        case consts.GET_LATEST_POSTS_REQUEST:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], true)\r\n                .setIn(['latestPosts', 'error'], false);\r\n        case consts.GET_LATEST_POSTS_SUCCESS:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], false)\r\n                .setIn(['latestPosts', 'error'], false)\r\n                .setIn(['latestPosts', 'data'], action.latestPosts);\r\n        case consts.GET_LATEST_POSTS_ERROR:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], false)\r\n                .setIn(['latestPosts', 'error'], action.error)\r\n                .setIn(['latestPosts', 'data'], false);\r\n        case consts.GET_SELECTED_POST_REQUEST:\r\n            return state\r\n                .setIn(['post', 'waiting'], true)\r\n                .setIn(['post', 'error'], false)\r\n                .set('selectedPost', false);\r\n        case consts.GET_SELECTED_POST_SUCCESS:\r\n            return state\r\n                .setIn(['post', 'waiting'], false)\r\n                .setIn(['post', 'error'], false)\r\n                .setIn(['post', 'data'], action.post)\r\n                .set('selectedPost', action.post);\r\n        case consts.GET_SELECTED_POST_ERROR:\r\n            return state\r\n                .setIn(['post', 'waiting'], false)\r\n                .setIn(['post', 'error'], action.error)\r\n                .setIn(['post', 'data'], false)\r\n                .set('selectedPost', false);\r\n        case consts.RESET_SELECTED_POST:\r\n            return state.setIn(['post', 'data'], false);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { put, call, all, takeLatest } from 'redux-saga/effects';\r\nimport services from '../../services/bloggerAPIs';\r\nimport * as consts from './consts';\r\nimport utils from '../../utils';\r\n\r\nfunction* getSamePostsSaga({ payload }) {\r\n    try {\r\n        const samePosts = yield call(services.getPosts, payload);\r\n        const postsIncludedImages = utils.getImages(samePosts.data.items);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        yield all([\r\n            put({\r\n                type: consts.GET_SAME_POSTS_SUCCESS,\r\n                samePosts: postsIncludedCurrency\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_SAME_POSTS_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* getLatestPostsSaga() {\r\n    try {\r\n        const latestPosts = yield call(services.getLatestPost);\r\n        const postsIncludedImages = utils.getImages(latestPosts.data.items);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        yield all([\r\n            put({\r\n                type: consts.GET_LATEST_POSTS_SUCCESS,\r\n                latestPosts: postsIncludedCurrency\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_LATEST_POSTS_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport function* getSelectedPostSaga({ payload }) {\r\n    try {\r\n        const post = yield call(services.getSelectedPost, payload);\r\n        const postsIncludedImages = utils.getImages([post.data]);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        yield all([\r\n            put({\r\n                type: consts.GET_SELECTED_POST_SUCCESS,\r\n                post: postsIncludedCurrency[0]\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_SELECTED_POST_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport default function* root() {\r\n    yield takeLatest(consts.GET_SAME_POSTS_REQUEST, getSamePostsSaga);\r\n    yield takeLatest(consts.GET_SELECTED_POST_REQUEST, getSelectedPostSaga);\r\n    yield takeLatest(consts.GET_LATEST_POSTS_REQUEST, getLatestPostsSaga);\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst styles = {\r\n    root: {\r\n        flexGrow: 1\r\n    }\r\n};\r\n\r\nfunction LoadingComponent(props) {\r\n    const { classes } = props;\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color=\"secondary\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nLoadingComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(LoadingComponent);\r\n","import { fromJS } from 'immutable';\r\n\r\nexport default fromJS({\r\n    posts: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    }\r\n});\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ButtonBase } from '@material-ui/core';\r\n\r\nimport { createStructuredSelector } from 'reselect';\r\nimport Utils from '../../utils';\r\nimport { saveKeyword, getHomePosts, getMorePosts } from './actions';\r\nimport { resetSelectedPost } from '../Detail/actions';\r\n\r\nimport { makeSelectNextPageToken } from './selectors';\r\n\r\nclass PostsList extends Component {\r\n    componentDidMount() {\r\n        const { keyword, saveKeyword, isSearch } = this.props;\r\n        if (!isSearch) {\r\n            if (keyword) {\r\n                saveKeyword(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    onHandleSelectPost = post => {\r\n        const { onHandleSelectPost, resetSelectedPost } = this.props;\r\n        resetSelectedPost();\r\n        onHandleSelectPost(post);\r\n    };\r\n\r\n    clearSearch = () => {\r\n        const { getHomePosts, saveKeyword } = this.props;\r\n        saveKeyword(null);\r\n        getHomePosts({ pageToken: null, keyword: null });\r\n    };\r\n\r\n    viewMore = (ev, pageToken) => {\r\n        ev.preventDefault();\r\n        const { getMorePosts, keyword } = this.props;\r\n        getMorePosts({ pageToken, keyword });\r\n    };\r\n\r\n    render() {\r\n        const { posts, match, home, nextPageToken } = this.props;\r\n\r\n        if (posts.length > 0) {\r\n            return (\r\n                <Grid className=\"list-wrp\">\r\n                    <Grid container spacing={32}>\r\n                        {posts.map(post => {\r\n                            let label = post.labels[0] + '/';\r\n                            if (!home) {\r\n                                label = '';\r\n                            }\r\n                            const postUrl = Utils.convertStringToURL(\r\n                                post.title\r\n                            );\r\n                            const uri =\r\n                                match.url +\r\n                                label +\r\n                                postUrl +\r\n                                '-idpx' +\r\n                                post.id +\r\n                                '.html';\r\n                            return (\r\n                                <Grid\r\n                                    item\r\n                                    key={post.id}\r\n                                    className=\"col-l-3 col-3 col-s-4 post-item\"\r\n                                >\r\n                                    <div className=\"item-img\">\r\n                                        <Link\r\n                                            to={uri}\r\n                                            onClick={() =>\r\n                                                this.onHandleSelectPost(post)\r\n                                            }\r\n                                        >\r\n                                            <img\r\n                                                src={post.images[0]}\r\n                                                alt={post.title}\r\n                                            />\r\n                                        </Link>\r\n                                    </div>\r\n                                    <div className=\"item-info\">\r\n                                        <div className=\"title\">\r\n                                            <Link\r\n                                                to={uri}\r\n                                                onClick={() =>\r\n                                                    this.onHandleSelectPost(\r\n                                                        post\r\n                                                    )\r\n                                                }\r\n                                            >\r\n                                                <Typography\r\n                                                    className=\"card-title\"\r\n                                                    gutterBottom\r\n                                                    variant=\"h5\"\r\n                                                    component=\"h3\"\r\n                                                >\r\n                                                    {post.title}\r\n                                                </Typography>\r\n                                            </Link>\r\n                                        </div>\r\n                                        {post.price && (\r\n                                            <div className=\"price\">\r\n                                                {post.price}\r\n                                                {post.currency && (\r\n                                                    <span className=\"currency\">\r\n                                                        {post.currency}\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                </Grid>\r\n                            );\r\n                        })}\r\n                    </Grid>\r\n                    {!home && (\r\n                        <Grid container>\r\n                            <Grid className=\"paging\">\r\n                                {nextPageToken && (\r\n                                    <ButtonBase\r\n                                        className=\"btn btn-normal btn-success\"\r\n                                        onClick={ev =>\r\n                                            this.viewMore(ev, nextPageToken)\r\n                                        }\r\n                                    >\r\n                                        View More\r\n                                    </ButtonBase>\r\n                                )}\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return (\r\n                <Grid container className=\"item-container\">\r\n                    Have no any post for this topid :(\r\n                </Grid>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Define PropTypes\r\nPostsList.propTypes = {\r\n    posts: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]).isRequired,\r\n    keyword: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n    isSearch: PropTypes.bool,\r\n    saveKeyword: PropTypes.func.isRequired,\r\n    getHomePosts: PropTypes.func.isRequired,\r\n    match: PropTypes.object.isRequired,\r\n    home: PropTypes.bool,\r\n    onHandleSelectPost: PropTypes.func.isRequired,\r\n    resetSelectedPost: PropTypes.func.isRequired,\r\n    nextPageToken: PropTypes.string,\r\n    getMorePosts: PropTypes.func.isRequired\r\n};\r\n\r\nPostsList.defaultProps = {\r\n    home: false,\r\n    nextPageToken: null,\r\n    isSearch: false,\r\n    keyword: false\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    nextPageToken: makeSelectNextPageToken()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    resetSelectedPost,\r\n    saveKeyword,\r\n    getHomePosts,\r\n    getMorePosts\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PostsList);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport { compose } from 'redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport Utils from '../../utils';\r\nimport { makeSelectLatestPosts } from './selectors';\r\n\r\nimport LoadingComponent from '../../components/commons/LoadingComponent';\r\n\r\nimport { getLatestPosts } from './actions';\r\n\r\nimport injectReducer from '../../utils/injectReducer';\r\nimport injectSaga from '../../utils/injectSaga';\r\nimport reducer from './reducer';\r\nimport saga from './saga';\r\n\r\nclass LatestPosts extends Component {\r\n    componentDidMount() {\r\n        const { getLatestPosts } = this.props;\r\n        getLatestPosts();\r\n    }\r\n\r\n    onHandleSelectPost = post => {\r\n        const { onHandleSelectPost } = this.props;\r\n        onHandleSelectPost(post);\r\n    };\r\n\r\n    render() {\r\n        const { latestPosts, selectedPost } = this.props;\r\n        let latestPostsFiltered = [];\r\n\r\n        if (latestPosts.waiting) {\r\n            return (\r\n                <Grid container spacing={32} className=\"latest-post\">\r\n                    <LoadingComponent />\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        if (latestPosts.data) {\r\n            if (selectedPost) {\r\n                const latestPostsCloned = cloneDeep(latestPosts.data);\r\n                latestPostsFiltered = latestPostsCloned.filter(\r\n                    post => post.id !== selectedPost.id\r\n                );\r\n\r\n                if (latestPostsFiltered.length > 10) {\r\n                    latestPostsFiltered = latestPostsFiltered.pop();\r\n                }\r\n            } else {\r\n                latestPostsFiltered = latestPosts.data;\r\n            }\r\n        }\r\n\r\n        if (latestPostsFiltered.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"latest-post\">\r\n                {latestPostsFiltered.map(post => {\r\n                    const postUrl = Utils.convertStringToURL(post.title);\r\n                    const uri =\r\n                        '/' +\r\n                        post.labels[0] +\r\n                        '/' +\r\n                        postUrl +\r\n                        '-idpx' +\r\n                        post.id +\r\n                        '.html';\r\n                    return (\r\n                        <div\r\n                            key={post.id}\r\n                            className=\"col-l-12 col-12 col-s-6 post-item\"\r\n                        >\r\n                            <Link\r\n                                to={uri}\r\n                                onClick={() => this.onHandleSelectPost(post)}\r\n                            >\r\n                                <div className=\"img\">\r\n                                    <img\r\n                                        src={post.images[0]}\r\n                                        alt={post.title}\r\n                                    />\r\n                                </div>\r\n                                <Typography\r\n                                    className=\"card-title\"\r\n                                    gutterBottom\r\n                                    variant=\"h5\"\r\n                                    component=\"h4\"\r\n                                >\r\n                                    {post.title}\r\n                                </Typography>\r\n                                {post.price && (\r\n                                    <div className=\"price\">\r\n                                        {post.price}\r\n                                        {post.currency && (\r\n                                            <span className=\"currency\">\r\n                                                {post.currency}\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </Link>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLatestPosts.propTypes = {\r\n    latestPosts: PropTypes.object.isRequired,\r\n    onHandleSelectPost: PropTypes.func.isRequired,\r\n    getLatestPosts: PropTypes.func.isRequired,\r\n    selectedPost: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\r\n        .isRequired\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    latestPosts: makeSelectLatestPosts()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getLatestPosts\r\n};\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\nconst withReducer = injectReducer({ key: 'detailReducer', reducer });\r\nconst withSaga = injectSaga({ key: 'detailSaga', saga });\r\n\r\nexport default compose(\r\n    withReducer,\r\n    withSaga,\r\n    withConnect\r\n)(LatestPosts);\r\n","import initialState from './initialState';\r\nimport * as consts from './consts';\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case consts.GET_POSTS_REQUEST:\r\n            return state\r\n                .setIn(['posts', 'waiting'], true)\r\n                .setIn(['posts', 'error'], false);\r\n        case consts.GET_POSTS_SUCCESS:\r\n            return state\r\n                .setIn(['posts', 'waiting'], false)\r\n                .setIn(['posts', 'error'], false)\r\n                .updateIn(['posts', 'data'], obj => ({\r\n                    ...obj,\r\n                    [action.posts.category]: action.posts.data\r\n                }));\r\n        case consts.GET_POSTS_ERROR:\r\n            return state\r\n                .setIn(['posts', 'waiting'], false)\r\n                .setIn(['posts', 'error'], action.error)\r\n                .setIn(['posts', 'data'], false);\r\n        case consts.RESET_POSTS:\r\n            return state.setIn(['posts', 'data'], false);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { put, call, all, takeEvery } from 'redux-saga/effects';\r\nimport services from '../../services/bloggerAPIs';\r\nimport * as consts from './consts';\r\nimport { setNextPageToken } from '../Home/actions';\r\nimport utils from '../../utils';\r\n\r\nfunction* getPostsSaga({ payload }) {\r\n    try {\r\n        const posts = yield call(services.getPosts, payload);\r\n        const postsIncludedImages = utils.getImages(posts.data.items);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        let nextPageToken = null;\r\n        if (posts.data.nextPageToken) {\r\n            nextPageToken = posts.data.nextPageToken;\r\n        }\r\n        yield all([\r\n            put({\r\n                type: consts.GET_POSTS_SUCCESS,\r\n                posts: { data: postsIncludedCurrency, category: payload.label }\r\n            }),\r\n            put(setNextPageToken(nextPageToken))\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_POSTS_ERROR,\r\n            error: error\r\n        });\r\n        yield put(setNextPageToken(null));\r\n    }\r\n}\r\n\r\nexport default function* root() {\r\n    yield takeEvery(consts.GET_POSTS_REQUEST, getPostsSaga);\r\n}\r\n","import { createSelector } from 'reselect';\r\nimport initialState from './initialState';\r\n\r\nconst labelsSelector = state => state.get('labelsReducer', initialState);\r\n\r\nconst makeSelectPosts = () =>\r\n    createSelector(\r\n        labelsSelector,\r\n        state => state.get('posts').toJS()\r\n    );\r\n\r\nexport { makeSelectPosts };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport Utils from '../../utils';\r\nimport { resetSelectedPost } from './actions';\r\nimport { limitOtherPosts } from '../../configs';\r\nimport { makeSelectSamePosts, makeSelectSelectedPost } from './selectors';\r\n\r\nimport LoadingComponent from '../../components/commons/LoadingComponent';\r\n\r\nclass SamePosts extends Component {\r\n    componentDidMount() {}\r\n\r\n    onHandleSelectPost = post => {\r\n        const { onHandleSelectPost, resetSelectedPost } = this.props;\r\n        resetSelectedPost();\r\n        onHandleSelectPost(post);\r\n    };\r\n\r\n    render() {\r\n        const { samePosts, selectedPost } = this.props;\r\n        let samePostsFiltered = [];\r\n        if (samePosts.waiting) {\r\n            return (\r\n                <Grid container spacing={32} className=\"other-post\">\r\n                    <LoadingComponent />\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        if (samePosts.data) {\r\n            const samePostsCloned = cloneDeep(samePosts.data);\r\n            samePostsFiltered = samePostsCloned.filter(\r\n                post => post.id !== selectedPost.id\r\n            );\r\n\r\n            if (samePostsFiltered.length > limitOtherPosts) {\r\n                samePostsFiltered = samePostsFiltered.pop();\r\n            }\r\n        }\r\n\r\n        if (samePostsFiltered.length <= 0) {\r\n            return (\r\n                <Grid container spacing={32} className=\"other-post\">\r\n                    <Grid item className=\"col-l-12 col-12 col-s-12 post-item\">\r\n                        No data available\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"latest-post\">\r\n                {samePostsFiltered.map(post => {\r\n                    const postUrl = Utils.convertStringToURL(post.title);\r\n                    const uri =\r\n                        '/' +\r\n                        post.labels[0] +\r\n                        '/' +\r\n                        postUrl +\r\n                        '-idpx' +\r\n                        post.id +\r\n                        '.html';\r\n                    return (\r\n                        <div\r\n                            key={post.id}\r\n                            className=\"col-l-12 col-12 col-s-6 post-item\"\r\n                        >\r\n                            <Link\r\n                                to={uri}\r\n                                onClick={() => this.onHandleSelectPost(post)}\r\n                            >\r\n                                <div className=\"img\">\r\n                                    <img\r\n                                        src={post.images[0]}\r\n                                        alt={post.title}\r\n                                    />\r\n                                </div>\r\n                                <Typography\r\n                                    className=\"card-title\"\r\n                                    gutterBottom\r\n                                    variant=\"h5\"\r\n                                    component=\"h4\"\r\n                                >\r\n                                    {post.title}\r\n                                </Typography>\r\n                                {post.price && (\r\n                                    <div className=\"price\">\r\n                                        {post.price}\r\n                                        {post.currency && (\r\n                                            <span className=\"currency\">\r\n                                                {post.currency}\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </Link>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSamePosts.propTypes = {\r\n    samePosts: PropTypes.object.isRequired,\r\n    onHandleSelectPost: PropTypes.func.isRequired,\r\n    resetSelectedPost: PropTypes.func.isRequired,\r\n    selectedPost: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\r\n        .isRequired\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    samePosts: makeSelectSamePosts(),\r\n    selectedPost: makeSelectSelectedPost()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    resetSelectedPost\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SamePosts);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FacebookProvider, Comments } from 'react-facebook';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { fb_app_id } from '../configs';\r\n\r\nclass FBComments extends Component {\r\n    render() {\r\n        const { url } = this.props;\r\n        if (url) {\r\n            return (\r\n                <Grid className=\"comment-box\">\r\n                    <FacebookProvider appId={fb_app_id}>\r\n                        <Comments href={url} width=\"100%\" />\r\n                    </FacebookProvider>\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n// Define PropTypes\r\nFBComments.propTypes = {\r\n    url: PropTypes.string.isRequired\r\n};\r\n\r\nFBComments.defaultProps = {};\r\n\r\nexport default FBComments;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport renderHTML from 'react-render-html';\r\nimport { Helmet } from 'react-helmet';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport utils from '../../utils';\r\nimport { getSamePosts, selectPost } from './actions';\r\nimport { limitOtherPosts, fb_app_id } from '../../configs';\r\nimport Comments from '../Comments';\r\nimport Loading from '../../components/commons/Loading';\r\n\r\nimport ogImg from '../../assets/images/og-img.jpg';\r\n\r\nimport { makeSelectPost } from './selectors';\r\n\r\nimport injectReducer from '../../utils/injectReducer';\r\nimport injectSaga from '../../utils/injectSaga';\r\n\r\nimport reducer from './reducer';\r\nimport saga from './saga';\r\n\r\nclass Detail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            PageNoFound: false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const { post } = this.props;\r\n\r\n        if (!post.data) {\r\n            this.getSelectedPost();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { post, getSamePosts } = this.props;\r\n        if (!post.waiting) {\r\n            if (post.data) {\r\n                if (post.data.id !== prevProps.post.data.id) {\r\n                    getSamePosts({\r\n                        label: post.data.labels[0],\r\n                        limit: limitOtherPosts\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutID);\r\n    }\r\n\r\n    setPageNotFound = () => {\r\n        this.setState({ PageNoFound: true });\r\n    };\r\n\r\n    getSelectedPost = () => {\r\n        const { match } = this.props;\r\n        const url = match.params.id;\r\n        if (url) {\r\n            const postId = utils.getIdFromURL(url);\r\n            const { selectPost } = this.props;\r\n            selectPost(postId);\r\n        } else {\r\n            this.setPageNotFound();\r\n        }\r\n    };\r\n\r\n    handleSelectPost = selectedPost => {\r\n        const { selectPost } = this.props;\r\n        selectPost(selectedPost.id);\r\n    };\r\n\r\n    render() {\r\n        const { post } = this.props;\r\n        const { PageNoFound } = this.state;\r\n\r\n        if (post.waiting) {\r\n            return (\r\n                <div className=\"loading-wrp\">\r\n                    <Loading size={30} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (PageNoFound) {\r\n            return (\r\n                <Grid container className=\"detail\">\r\n                    <Grid container>\r\n                        <h2>Page not found! :(</h2>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        if (post.data) {\r\n            return (\r\n                <Grid container className=\"detail\">\r\n                    <Helmet titleTemplate=\" - %s\" title={post.data.title} />\r\n                    <Helmet>\r\n                        <meta name=\"description\" content={post.data.title} />\r\n                        <meta\r\n                            property=\"og:url\"\r\n                            content={window.location.href}\r\n                        />\r\n                        <meta property=\"og:type\" content=\"article\" />\r\n                        <meta property=\"og:title\" content={post.data.title} />\r\n                        <meta\r\n                            property=\"og:image\"\r\n                            content={\r\n                                post.data.images[0]\r\n                                    ? post.data.images[0]\r\n                                    : ogImg\r\n                            }\r\n                        />\r\n                        <meta\r\n                            property=\"og:description\"\r\n                            content={post.data.title}\r\n                        />\r\n                        <meta property=\"fb:app_id\" content={fb_app_id} />\r\n                        <link rel=\"canonical\" href={window.location.href} />\r\n                    </Helmet>\r\n                    <Grid container className=\"detail-wrp\">\r\n                        <Grid item xs={12} className=\"detail-header\">\r\n                            <h1>{post.data.title}</h1>\r\n                        </Grid>\r\n                        <Grid className=\"detail-left\">\r\n                            <Grid className=\"detail-content\">\r\n                                {renderHTML(post.data.content)}\r\n                            </Grid>\r\n                            <Grid container>\r\n                                <Comments\r\n                                    title={post.data.title}\r\n                                    url={window.location.href}\r\n                                    postId={post.data.id}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return (\r\n                <Grid container className=\"detail\">\r\n                    <Grid container>\r\n                        <h2>No data available! :(</h2>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Define PropTypes\r\nDetail.propTypes = {\r\n    post: PropTypes.object.isRequired,\r\n    selectPost: PropTypes.func.isRequired,\r\n    getSamePosts: PropTypes.func.isRequired,\r\n    match: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    post: makeSelectPost()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    selectPost,\r\n    getSamePosts\r\n};\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\nconst withReducer = injectReducer({ key: 'detailReducer', reducer });\r\nconst withSaga = injectSaga({ key: 'detailSaga', saga });\r\n\r\nexport default compose(\r\n    withReducer,\r\n    withSaga,\r\n    withConnect\r\n)(Detail);\r\n"],"sourceRoot":""}