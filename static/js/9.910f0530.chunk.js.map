{"version":3,"sources":["utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js","utils/reducerInjectors.js","utils/injectReducer.js","services/bloggerAPIs.js","components/commons/Loading.js","utils/checkStore.js","containers/Pages/consts.js","containers/Pages/initialState.js","containers/Pages/reducer.js","containers/Pages/saga.js","containers/Pages/selectors.js","containers/Pages/actions.js","containers/Pages/Question/index.js"],"names":["DAEMON","ONCE_TILL_UNMOUNT","allowedModes","checkKey","key","invariant","isString","isEmpty","checkDescriptor","descriptor","shape","saga","isFunction","mode","includes","conformsTo","injectSagaFactory","store","isValid","arguments","length","undefined","args","checkStore","newDescriptor","Object","objectSpread","hasSaga","Reflect","has","injectedSagas","task","runSaga","ejectSagaFactory","cancel","__webpack_exports__","_ref","WrappedComponent","InjectSaga","_React$Component","props","context","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","injectors","injectSaga","ejectSaga","inherits","createClass","value","react_default","a","createElement","React","Component","contextType","ReactReduxContext","displayName","concat","name","hoistNonReactStatics","injectReducerFactory","reducer","injectedReducers","replaceReducer","createReducer","ReducerInjector","injectReducer","axios__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","axios__WEBPACK_IMPORTED_MODULE_0___default","n","_configs__WEBPACK_IMPORTED_MODULE_1__","getEndpoint","payload","blogId","label","apiKey","limit","instanceCreate","axios","create","getHomePosts","endpoint","limitPerPage","keyword","pageToken","get","getPosts","getSelectedPost","getLatestPost","limitLatest","getPage","Loading","_this$props","size","color","react__WEBPACK_IMPORTED_MODULE_5___default","className","_material_ui_core_CircularProgress__WEBPACK_IMPORTED_MODULE_6___default","style","fontSize","PureComponent","defaultProps","d","lodash__WEBPACK_IMPORTED_MODULE_0__","invariant__WEBPACK_IMPORTED_MODULE_1__","invariant__WEBPACK_IMPORTED_MODULE_1___default","dispatch","subscribe","getState","isObject","GET_CONTACT_PAGE_REQUEST","GET_CONTACT_PAGE_SUCCESS","GET_CONTACT_PAGE_ERROR","GET_QUESTION_PAGE_REQUEST","GET_QUESTION_PAGE_SUCCESS","GET_QUESTION_PAGE_ERROR","immutable__WEBPACK_IMPORTED_MODULE_0__","fromJS","questionPage","waiting","error","data","contactPage","_initialState__WEBPACK_IMPORTED_MODULE_0__","_consts__WEBPACK_IMPORTED_MODULE_1__","state","initialState","action","type","consts","setIn","getContactPageSaga","getPromotionPageSaga","root","C_Users_hieuh_Desktop_Projects_xtsp_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","next","services","sent","all","put","t0","response","stop","_marked","_ref2","_context2","_marked2","_context3","takeLatest","_marked3","makeSelectContactPage","makeSelectQuestionPage","reselect__WEBPACK_IMPORTED_MODULE_0__","_initialState__WEBPACK_IMPORTED_MODULE_1__","pagesSelector","createSelector","toJS","getContactPage","getQuestionPage","_consts__WEBPACK_IMPORTED_MODULE_0__","Question","getPages","_callee","questionPageId","react__WEBPACK_IMPORTED_MODULE_7___default","_components_commons_Loading__WEBPACK_IMPORTED_MODULE_18__","_material_ui_core__WEBPACK_IMPORTED_MODULE_13__","container","react_helmet__WEBPACK_IMPORTED_MODULE_9__","content","rel","href","window","location","renderHTML","mapStateToProps","createStructuredSelector","mapDispatchToProps","withConnect","connect","withReducer","withSaga","compose"],"mappings":"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","file":"static/js/9.910f0530.chunk.js","sourcesContent":["export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\r\nexport const DAEMON = '@@saga-injector/daemon';\r\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport { DAEMON, ONCE_TILL_UNMOUNT, RESTART_ON_REMOUNT } from './constants';\r\n\r\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\r\n\r\nconst checkKey = key => invariant(isString(key) && !isEmpty(key), '(app/utils...) injectSaga: Expected `key` to be a non empty string');\r\n\r\nconst checkDescriptor = descriptor => {\r\n    const shape = {\r\n        saga: isFunction,\r\n        mode: mode => isString(mode) && allowedModes.includes(mode),\r\n    };\r\n    invariant(conformsTo(descriptor, shape), '(app/utils...) injectSaga: Expected a valid saga descriptor');\r\n};\r\n\r\nexport function injectSagaFactory(store, isValid) {\r\n    return function injectSaga(key, descriptor = {}, args) {\r\n        if (!isValid) checkStore(store);\r\n\r\n        const newDescriptor = {\r\n            ...descriptor,\r\n            mode: descriptor.mode || DAEMON,\r\n        };\r\n        const { saga, mode } = newDescriptor;\r\n\r\n        checkKey(key);\r\n        checkDescriptor(newDescriptor);\r\n\r\n        let hasSaga = Reflect.has(store.injectedSagas, key);\r\n\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            const oldDescriptor = store.injectedSagas[key];\r\n            // enable hot reloading of daemon and once-till-unmount sagas\r\n            if (hasSaga && oldDescriptor.saga !== saga) {\r\n                oldDescriptor.task.cancel();\r\n                hasSaga = false;\r\n            }\r\n        }\r\n\r\n        if (!hasSaga || (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)) {\r\n            /* eslint-disable no-param-reassign */\r\n            store.injectedSagas[key] = {\r\n                ...newDescriptor,\r\n                task: store.runSaga(saga, args),\r\n            };\r\n            /* eslint-enable no-param-reassign */\r\n        }\r\n    };\r\n}\r\n\r\nexport function ejectSagaFactory(store, isValid) {\r\n    return function ejectSaga(key) {\r\n        if (!isValid) checkStore(store);\r\n\r\n        checkKey(key);\r\n\r\n        if (Reflect.has(store.injectedSagas, key)) {\r\n            const descriptor = store.injectedSagas[key];\r\n            if (descriptor.mode && descriptor.mode !== DAEMON) {\r\n                descriptor.task.cancel();\r\n                // Clean up in production; in development we need `descriptor.saga` for hot reloading\r\n                if (process.env.NODE_ENV === 'production') {\r\n                    // Need some value to be able to detect `ONCE_TILL_UNMOUNT` sagas in `injectSaga`\r\n                    store.injectedSagas[key] = 'done'; // eslint-disable-line no-param-reassign\r\n                }\r\n            }\r\n        }\r\n    };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n    checkStore(store);\r\n\r\n    return {\r\n        injectSaga: injectSagaFactory(store, true),\r\n        ejectSaga: ejectSagaFactory(store, true),\r\n    };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './sagaInjectors';\r\n\r\n/**\r\n * Dynamically injects a saga, passes component's props as saga arguments\r\n *\r\n * @param {string} key A key of the saga\r\n * @param {function} saga A root saga that will be injected\r\n * @param {string} [mode] By default (constants.DAEMON) the saga will be started\r\n * on component mount and never canceled or started again. Another two options:\r\n *   - constants.RESTART_ON_REMOUNT — the saga will be started on component mount and\r\n *   cancelled with `task.cancel()` on component unmount for improved performance,\r\n *   - constants.ONCE_TILL_UNMOUNT — behaves like 'RESTART_ON_REMOUNT' but never runs it again.\r\n *\r\n */\r\nexport default ({ key, saga, mode }) => WrappedComponent => {\r\n    class InjectSaga extends React.Component {\r\n        static WrappedComponent = WrappedComponent;\r\n\r\n        static contextType = ReactReduxContext;\r\n\r\n        static displayName = `withSaga(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\r\n\r\n        constructor(props, context) {\r\n            super(props, context);\r\n\r\n            this.injectors = getInjectors(context.store);\r\n\r\n            this.injectors.injectSaga(key, { saga, mode }, this.props);\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            this.injectors.ejectSaga(key);\r\n        }\r\n\r\n        render() {\r\n            return <WrappedComponent {...this.props} />;\r\n        }\r\n    }\r\n\r\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\r\n};\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport createReducer from '../reducers';\r\n\r\nexport function injectReducerFactory(store, isValid) {\r\n    return function injectReducer(key, reducer) {\r\n        if (!isValid) checkStore(store);\r\n\r\n        invariant(isString(key) && !isEmpty(key) && isFunction(reducer), '(app/utils...) injectReducer: Expected `reducer` to be a reducer function');\r\n\r\n        // Check `store.injectedReducers[key] === reducer` for hot reloading when a key is the same but a reducer is different\r\n        if (Reflect.has(store.injectedReducers, key) && store.injectedReducers[key] === reducer) return;\r\n\r\n        store.injectedReducers[key] = reducer; // eslint-disable-line no-param-reassign\r\n        store.replaceReducer(createReducer(store.injectedReducers));\r\n    };\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n    checkStore(store);\r\n\r\n    return {\r\n        injectReducer: injectReducerFactory(store, true),\r\n    };\r\n}\r\n","import React from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './reducerInjectors';\r\n\r\n/**\r\n * Dynamically injects a reducer\r\n *\r\n * @param {string} key A key of the reducer\r\n * @param {function} reducer A reducer that will be injected\r\n *\r\n */\r\nexport default ({ key, reducer }) => WrappedComponent => {\r\n    class ReducerInjector extends React.Component {\r\n        static WrappedComponent = WrappedComponent;\r\n\r\n        static contextType = ReactReduxContext;\r\n\r\n        static displayName = `withReducer(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\r\n\r\n        constructor(props, context) {\r\n            super(props, context);\r\n\r\n            getInjectors(context.store).injectReducer(key, reducer);\r\n        }\r\n\r\n        render() {\r\n            return <WrappedComponent {...this.props} />;\r\n        }\r\n    }\r\n\r\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\r\n};\r\n","import axios from 'axios';\r\n\r\nimport { limitPerPage, apiKey, blogId, limitLatest } from '../configs';\r\n\r\nconst getEndpoint = payload => {\r\n    return `https://www.googleapis.com/blogger/v3/blogs/${blogId}/posts?labels=${\r\n        payload.label\r\n    }&key=${apiKey}${payload.limit ? '&maxResults=' + payload.limit : ''}`;\r\n};\r\n\r\nfunction instanceCreate() {\r\n    return axios.create({});\r\n}\r\n\r\nfunction getPosts(payload) {\r\n    const endpoint = getEndpoint(payload, null);\r\n    const apiInstance = instanceCreate();\r\n    return apiInstance.get(endpoint);\r\n}\r\n\r\nfunction getSelectedPost(payload) {\r\n    const endpoint = `https://www.googleapis.com/blogger/v3/blogs/${blogId}/posts/${payload}?key=${apiKey}`;\r\n    const apiInstance = instanceCreate();\r\n    return apiInstance.get(endpoint);\r\n}\r\n\r\nfunction getPage(payload) {\r\n    const endpoint = `https://www.googleapis.com/blogger/v3/blogs/${blogId}/pages/${payload}?key=${apiKey}`;\r\n    const apiInstance = instanceCreate();\r\n    return apiInstance.get(endpoint);\r\n}\r\n\r\nfunction getHomePosts(payload) {\r\n    let endpoint = `https://www.googleapis.com/blogger/v3/blogs/${blogId}/posts?key=${apiKey}&maxResults=${limitPerPage}`;\r\n    if (payload) {\r\n        endpoint = `https://www.googleapis.com/blogger/v3/blogs/${blogId}/${\r\n            payload.keyword\r\n                ? 'posts/search?q=' + payload.keyword + '&'\r\n                : 'posts?'\r\n        }key=${apiKey}&maxResults=${limitPerPage}${\r\n            payload.pageToken ? '&pageToken=' + payload.pageToken : ''\r\n        }`;\r\n    }\r\n    const apiInstance = instanceCreate();\r\n    return apiInstance.get(endpoint);\r\n}\r\n\r\nfunction getLatestPost() {\r\n    const endpoint = `https://www.googleapis.com/blogger/v3/blogs/${blogId}/posts?maxResults=${limitLatest}&orderBy=published&key=${apiKey}`;\r\n    const apiInstance = instanceCreate();\r\n    return apiInstance.get(endpoint);\r\n}\r\n\r\nexport default {\r\n    getHomePosts,\r\n    getPosts,\r\n    getSelectedPost,\r\n    getLatestPost,\r\n    getPage\r\n};\r\n","import React, { PureComponent } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nclass Loading extends PureComponent {\r\n    render() {\r\n        const { size, color } = this.props;\r\n        return (\r\n            <div className=\"component-loading\">\r\n                <CircularProgress size={size} className={color} />\r\n                <div\r\n                    className=\"loading-text blink-text\"\r\n                    style={{ fontSize: size / 1.5 }}\r\n                >\r\n                    Loading...\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLoading.propTypes = {\r\n    size: PropTypes.number,\r\n    color: PropTypes.string\r\n};\r\n\r\nLoading.defaultProps = {\r\n    size: 20,\r\n    color: 'color-darkBlue'\r\n};\r\n\r\nexport default Loading;\r\n","import { conformsTo, isFunction, isObject } from 'lodash';\r\nimport invariant from 'invariant';\r\n\r\n/**\r\n * Validate the shape of redux store\r\n */\r\nexport default function checkStore(store) {\r\n    const shape = {\r\n        dispatch: isFunction,\r\n        subscribe: isFunction,\r\n        getState: isFunction,\r\n        replaceReducer: isFunction,\r\n        runSaga: isFunction,\r\n        injectedReducers: isObject,\r\n        injectedSagas: isObject,\r\n    };\r\n    invariant(conformsTo(store, shape), '(app/utils...) injectors: Expected a valid redux store');\r\n}\r\n","export const GET_CONTACT_PAGE_REQUEST = 'pages/GET_CONTACT_PAGE_REQUEST';\r\nexport const GET_CONTACT_PAGE_SUCCESS = 'pages/GET_CONTACT_PAGE_SUCCESS';\r\nexport const GET_CONTACT_PAGE_ERROR = 'pages/GET_CONTACT_PAGE_ERROR';\r\n\r\nexport const GET_QUESTION_PAGE_REQUEST = 'pages/GET_QUESTION_PAGE_REQUEST';\r\nexport const GET_QUESTION_PAGE_SUCCESS = 'pages/GET_QUESTION_PAGE_SUCCESS';\r\nexport const GET_QUESTION_PAGE_ERROR = 'pages/GET_QUESTION_PAGE_ERROR';\r\n","import { fromJS } from 'immutable';\r\n\r\nexport default fromJS({\r\n    questionPage: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    contactPage: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    }\r\n});\r\n","import initialState from './initialState';\r\nimport * as consts from './consts';\r\n\r\n// Handles post related actions\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case consts.GET_CONTACT_PAGE_REQUEST:\r\n            return state\r\n                .setIn(['contactPage', 'data'], false)\r\n                .setIn(['contactPage', 'waiting'], true)\r\n                .setIn(['contactPage', 'error'], false);\r\n        case consts.GET_CONTACT_PAGE_SUCCESS:\r\n            return state\r\n                .setIn(['contactPage', 'data'], action.contactPage)\r\n                .setIn(['contactPage', 'waiting'], false)\r\n                .setIn(['contactPage', 'error'], false);\r\n        case consts.GET_CONTACT_PAGE_ERROR:\r\n            return state\r\n                .setIn(['contactPage', 'data'], false)\r\n                .setIn(['contactPage', 'waiting'], false)\r\n                .setIn(['contactPage', 'error'], action.error);\r\n        case consts.GET_QUESTION_PAGE_REQUEST:\r\n            return state\r\n                .setIn(['questionPage', 'data'], false)\r\n                .setIn(['questionPage', 'waiting'], true)\r\n                .setIn(['questionPage', 'error'], false);\r\n        case consts.GET_QUESTION_PAGE_SUCCESS:\r\n            return state\r\n                .setIn(['questionPage', 'data'], action.questionPage)\r\n                .setIn(['questionPage', 'waiting'], false)\r\n                .setIn(['questionPage', 'error'], false);\r\n        case consts.GET_QUESTION_PAGE_ERROR:\r\n            return state\r\n                .setIn(['questionPage', 'data'], false)\r\n                .setIn(['questionPage', 'waiting'], false)\r\n                .setIn(['questionPage', 'error'], action.error);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { put, call, all, takeLatest } from 'redux-saga/effects';\r\nimport services from '../../services/bloggerAPIs';\r\nimport * as consts from './consts';\r\n\r\nfunction* getContactPageSaga({ payload }) {\r\n    try {\r\n        const contactPage = yield call(services.getPage, payload);\r\n        yield all([\r\n            put({\r\n                type: consts.GET_CONTACT_PAGE_SUCCESS,\r\n                contactPage: contactPage.data\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_CONTACT_PAGE_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* getPromotionPageSaga({ payload }) {\r\n    try {\r\n        const questionPage = yield call(services.getPage, payload);\r\n        yield all([\r\n            put({\r\n                type: consts.GET_QUESTION_PAGE_SUCCESS,\r\n                questionPage: questionPage.data\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_QUESTION_PAGE_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport default function* root() {\r\n    yield takeLatest(consts.GET_CONTACT_PAGE_REQUEST, getContactPageSaga);\r\n    yield takeLatest(consts.GET_QUESTION_PAGE_REQUEST, getPromotionPageSaga);\r\n}\r\n","import { createSelector } from 'reselect';\r\nimport initialState from './initialState';\r\n\r\nconst pagesSelector = state => state.get('pagesReducer', initialState);\r\n\r\nconst makeSelectQuestionPage = () =>\r\n    createSelector(\r\n        pagesSelector,\r\n        state => state.get('questionPage').toJS()\r\n    );\r\n\r\nconst makeSelectContactPage = () =>\r\n    createSelector(\r\n        pagesSelector,\r\n        state => state.get('contactPage').toJS()\r\n    );\r\n\r\nexport { makeSelectContactPage, makeSelectQuestionPage };\r\n","import * as consts from './consts';\r\n\r\nexport const getContactPage = payload => ({\r\n    type: consts.GET_CONTACT_PAGE_REQUEST,\r\n    payload\r\n});\r\n\r\nexport const getQuestionPage = payload => ({\r\n    type: consts.GET_QUESTION_PAGE_REQUEST,\r\n    payload\r\n});\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { Helmet } from 'react-helmet';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport renderHTML from 'react-render-html';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nimport injectReducer from '../../../utils/injectReducer';\r\nimport injectSaga from '../../../utils/injectSaga';\r\n\r\nimport reducer from '../reducer';\r\nimport saga from '../saga';\r\n\r\nimport Loading from '../../../components/commons/Loading';\r\nimport { makeSelectQuestionPage } from '../selectors';\r\nimport { getQuestionPage } from '../actions';\r\nimport { questionPageId } from '../../../configs';\r\n\r\nclass Question extends Component {\r\n    componentDidMount() {\r\n        this.getPages();\r\n    }\r\n\r\n    getPages = async () => {\r\n        const { getQuestionPage } = this.props;\r\n        getQuestionPage(questionPageId);\r\n    };\r\n\r\n    render() {\r\n        const { questionPage } = this.props;\r\n        if (questionPage.waiting) {\r\n            return (\r\n                <div className=\"loading-wrp\">\r\n                    <Loading size={22} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (questionPage.data) {\r\n            return (\r\n                <Grid container className=\"page\">\r\n                    <Helmet>\r\n                        <title>Liên hệ</title>\r\n                        <meta\r\n                            name=\"description\"\r\n                            content=\"Xitashop.com: Trang liên hệ\"\r\n                        />\r\n                        <link rel=\"canonical\" href={window.location.href} />\r\n                    </Helmet>\r\n                    <div className=\"page-wrp\">\r\n                        {renderHTML(questionPage.data.content)}\r\n                    </div>\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nQuestion.propTypes = {\r\n    questionPage: PropTypes.object.isRequired,\r\n    getQuestionPage: PropTypes.func.isRequired\r\n};\r\n\r\nQuestion.defaultProps = {};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    questionPage: makeSelectQuestionPage()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getQuestionPage\r\n};\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\nconst withReducer = injectReducer({ key: 'pagesReducer', reducer });\r\nconst withSaga = injectSaga({ key: 'pagesSaga', saga });\r\n\r\nexport default compose(\r\n    withReducer,\r\n    withSaga,\r\n    withConnect\r\n)(Question);\r\n"],"sourceRoot":""}