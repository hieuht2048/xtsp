{"version":3,"sources":["containers/Detail/selectors.js","containers/Home/PostsList.js","containers/Detail/LatestPosts.js","containers/Categories/reducer.js","containers/Categories/saga.js","containers/Categories/selectors.js","containers/Detail/SamePosts.js","containers/Comments.js","containers/Detail/ImgSlider.js","containers/Detail/index.js","containers/Detail/initialState.js","containers/Detail/reducer.js","containers/Detail/saga.js","components/commons/LoadingComponent.js","containers/Categories/initialState.js"],"names":["__webpack_require__","d","__webpack_exports__","makeSelectSamePosts","makeSelectPost","makeSelectLatestPosts","makeSelectSelectedPost","reselect__WEBPACK_IMPORTED_MODULE_0__","_initialState__WEBPACK_IMPORTED_MODULE_1__","detailSelector","state","get","initialState","createSelector","toJS","PostsList","onHandleSelectPost","post","_this$props","_this","props","resetSelectedPost","clearSearch","_this$props2","getHomePosts","saveKeyword","pageToken","keyword","viewMore","ev","preventDefault","_this$props3","getMorePosts","_this$props4","this","isSearch","_this2","_this$props5","posts","match","home","nextPageToken","length","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_8___default","className","container","spacing","map","label","labels","postUrl","Utils","convertStringToURL","title","uri","url","id","item","key","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","onClick","src","images","alt","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_9___default","gutterBottom","variant","component","price","currency","_material_ui_core__WEBPACK_IMPORTED_MODULE_10__","Component","defaultProps","mapStateToProps","createStructuredSelector","makeSelectNextPageToken","mapDispatchToProps","connect","LatestPosts","getLatestPosts","latestPosts","selectedPost","latestPostsFiltered","waiting","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_10___default","_components_commons_LoadingComponent__WEBPACK_IMPORTED_MODULE_15__","data","cloneDeep","filter","pop","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_11___default","withConnect","withReducer","injectReducer","reducer","withSaga","injectSaga","saga","compose","arguments","undefined","action","type","consts","setIn","updateIn","obj","Object","C_Users_hieuh_Desktop_Projects_xtsp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","C_Users_hieuh_Desktop_Projects_xtsp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","category","error","getPostsSaga","root","_ref","payload","postsIncludedImages","postsIncludedPrice","postsIncludedCurrency","postsIncludedProductInfo","C_Users_hieuh_Desktop_Projects_xtsp_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","next","call","services","getPosts","sent","utils","getImages","items","getPrice","getCurrency","getProductInfo","all","put","setNextPageToken","t0","stop","_marked","_context2","takeEvery","_marked2","makeSelectPosts","labelsSelector","SamePosts","samePosts","samePostsFiltered","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_9___default","_components_commons_LoadingComponent__WEBPACK_IMPORTED_MODULE_16__","limitOtherPosts","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_10___default","FBComments","react_default","Grid_default","lib","appId","fb_app_id","href","width","ImgSlider","imgs","index_es","naturalSlideWidth","naturalSlideHeight","totalSlides","img","index","hasMasterSpinner","slide","Detail","classCallCheck","possibleConstructorReturn","getPrototypeOf","setPageNotFound","setState","PageNoFound","getSelectedPost","params","postId","getIdFromURL","selectPost","handleSelectPost","prevProps","getSamePosts","limit","clearTimeout","timeoutID","Loading","size","Helmet","titleTemplate","name","content","property","window","location","ogImg","rel","xs","Detail_ImgSlider","renderHTML","productInfo","Comments","immutable__WEBPACK_IMPORTED_MODULE_0__","fromJS","_initialState__WEBPACK_IMPORTED_MODULE_0__","_consts__WEBPACK_IMPORTED_MODULE_1__","set","getSamePostsSaga","getLatestPostsSaga","getSelectedPostSaga","response","getLatestPost","_ref2","_context3","_marked3","_context4","takeLatest","_marked4","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_LinearProgress__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_LinearProgress__WEBPACK_IMPORTED_MODULE_2___default","withStyles","flexGrow","classes","color"],"mappings":"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","file":"static/js/3.ac7fcf70.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\nimport initialState from './initialState';\r\n\r\nconst detailSelector = state => state.get('detailReducer', initialState);\r\n\r\nconst makeSelectSamePosts = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('samePosts').toJS()\r\n    );\r\n\r\nconst makeSelectPost = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('post').toJS()\r\n    );\r\n\r\nconst makeSelectLatestPosts = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('latestPosts').toJS()\r\n    );\r\n\r\nconst makeSelectSelectedPost = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('selectedPost')\r\n    );\r\n\r\nexport {\r\n    makeSelectSamePosts,\r\n    makeSelectPost,\r\n    makeSelectLatestPosts,\r\n    makeSelectSelectedPost\r\n};\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { ButtonBase } from '@material-ui/core';\r\n\r\nimport { createStructuredSelector } from 'reselect';\r\nimport Utils from '../../utils';\r\nimport { saveKeyword, getHomePosts, getMorePosts } from './actions';\r\nimport { resetSelectedPost } from '../Detail/actions';\r\n\r\nimport { makeSelectNextPageToken } from './selectors';\r\n\r\nclass PostsList extends Component {\r\n    componentDidMount() {\r\n        const { keyword, saveKeyword, isSearch } = this.props;\r\n        if (!isSearch) {\r\n            if (keyword) {\r\n                saveKeyword(null);\r\n            }\r\n        }\r\n    }\r\n\r\n    onHandleSelectPost = post => {\r\n        const { onHandleSelectPost, resetSelectedPost } = this.props;\r\n        resetSelectedPost();\r\n        onHandleSelectPost(post);\r\n    };\r\n\r\n    clearSearch = () => {\r\n        const { getHomePosts, saveKeyword } = this.props;\r\n        saveKeyword(null);\r\n        getHomePosts({ pageToken: null, keyword: null });\r\n    };\r\n\r\n    viewMore = (ev, pageToken) => {\r\n        ev.preventDefault();\r\n        const { getMorePosts, keyword } = this.props;\r\n        getMorePosts({ pageToken, keyword });\r\n    };\r\n\r\n    render() {\r\n        const { posts, match, home, nextPageToken } = this.props;\r\n\r\n        if (posts.length > 0) {\r\n            return (\r\n                <Grid className=\"list-wrp\">\r\n                    <Grid container spacing={32}>\r\n                        {posts.map(post => {\r\n                            let label = post.labels[0] + '/';\r\n                            if (!home) {\r\n                                label = '';\r\n                            }\r\n                            const postUrl = Utils.convertStringToURL(\r\n                                post.title\r\n                            );\r\n                            const uri =\r\n                                match.url +\r\n                                label +\r\n                                postUrl +\r\n                                '-idpx' +\r\n                                post.id +\r\n                                '.html';\r\n                            return (\r\n                                <Grid\r\n                                    item\r\n                                    key={post.id}\r\n                                    className=\"col-l-3 col-3 col-s-4 post-item\"\r\n                                >\r\n                                    <div className=\"item-img\">\r\n                                        <Link\r\n                                            to={uri}\r\n                                            onClick={() =>\r\n                                                this.onHandleSelectPost(post)\r\n                                            }\r\n                                        >\r\n                                            <img\r\n                                                src={post.images[0]}\r\n                                                alt={post.title}\r\n                                            />\r\n                                        </Link>\r\n                                    </div>\r\n                                    <div className=\"item-info\">\r\n                                        <div className=\"title\">\r\n                                            <Link\r\n                                                to={uri}\r\n                                                onClick={() =>\r\n                                                    this.onHandleSelectPost(\r\n                                                        post\r\n                                                    )\r\n                                                }\r\n                                            >\r\n                                                <Typography\r\n                                                    className=\"card-title\"\r\n                                                    gutterBottom\r\n                                                    variant=\"h5\"\r\n                                                    component=\"h3\"\r\n                                                >\r\n                                                    {post.title}\r\n                                                </Typography>\r\n                                            </Link>\r\n                                        </div>\r\n                                        {post.price && (\r\n                                            <div className=\"price\">\r\n                                                {post.price}\r\n                                                {post.currency && (\r\n                                                    <span className=\"currency\">\r\n                                                        {post.currency}\r\n                                                    </span>\r\n                                                )}\r\n                                            </div>\r\n                                        )}\r\n                                    </div>\r\n                                </Grid>\r\n                            );\r\n                        })}\r\n                    </Grid>\r\n                    {!home && (\r\n                        <Grid container>\r\n                            <Grid className=\"paging\">\r\n                                {nextPageToken && (\r\n                                    <ButtonBase\r\n                                        className=\"btn btn-normal btn-success\"\r\n                                        onClick={ev =>\r\n                                            this.viewMore(ev, nextPageToken)\r\n                                        }\r\n                                    >\r\n                                        View More\r\n                                    </ButtonBase>\r\n                                )}\r\n                            </Grid>\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return (\r\n                <Grid container className=\"item-container\">\r\n                    Have no any post for this topid :(\r\n                </Grid>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Define PropTypes\r\nPostsList.propTypes = {\r\n    posts: PropTypes.oneOfType([PropTypes.array, PropTypes.bool]).isRequired,\r\n    keyword: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\r\n    isSearch: PropTypes.bool,\r\n    saveKeyword: PropTypes.func.isRequired,\r\n    getHomePosts: PropTypes.func.isRequired,\r\n    match: PropTypes.object.isRequired,\r\n    home: PropTypes.bool,\r\n    onHandleSelectPost: PropTypes.func.isRequired,\r\n    resetSelectedPost: PropTypes.func.isRequired,\r\n    nextPageToken: PropTypes.string,\r\n    getMorePosts: PropTypes.func.isRequired\r\n};\r\n\r\nPostsList.defaultProps = {\r\n    home: false,\r\n    nextPageToken: null,\r\n    isSearch: false,\r\n    keyword: false\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    nextPageToken: makeSelectNextPageToken()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    resetSelectedPost,\r\n    saveKeyword,\r\n    getHomePosts,\r\n    getMorePosts\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(PostsList);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport { compose } from 'redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport Utils from '../../utils';\r\nimport { makeSelectLatestPosts } from './selectors';\r\n\r\nimport LoadingComponent from '../../components/commons/LoadingComponent';\r\n\r\nimport { getLatestPosts } from './actions';\r\n\r\nimport injectReducer from '../../utils/injectReducer';\r\nimport injectSaga from '../../utils/injectSaga';\r\nimport reducer from './reducer';\r\nimport saga from './saga';\r\n\r\nclass LatestPosts extends Component {\r\n    componentDidMount() {\r\n        const { getLatestPosts } = this.props;\r\n        getLatestPosts();\r\n    }\r\n\r\n    onHandleSelectPost = post => {\r\n        const { onHandleSelectPost } = this.props;\r\n        onHandleSelectPost(post);\r\n    };\r\n\r\n    render() {\r\n        const { latestPosts, selectedPost } = this.props;\r\n        let latestPostsFiltered = [];\r\n\r\n        if (latestPosts.waiting) {\r\n            return (\r\n                <Grid container spacing={32} className=\"latest-post\">\r\n                    <LoadingComponent />\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        if (latestPosts.data) {\r\n            if (selectedPost) {\r\n                const latestPostsCloned = cloneDeep(latestPosts.data);\r\n                latestPostsFiltered = latestPostsCloned.filter(\r\n                    post => post.id !== selectedPost.id\r\n                );\r\n\r\n                if (latestPostsFiltered.length > 10) {\r\n                    latestPostsFiltered = latestPostsFiltered.pop();\r\n                }\r\n            } else {\r\n                latestPostsFiltered = latestPosts.data;\r\n            }\r\n        }\r\n\r\n        if (latestPostsFiltered.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"latest-post\">\r\n                {latestPostsFiltered.map(post => {\r\n                    const postUrl = Utils.convertStringToURL(post.title);\r\n                    const uri =\r\n                        '/' +\r\n                        post.labels[0] +\r\n                        '/' +\r\n                        postUrl +\r\n                        '-idpx' +\r\n                        post.id +\r\n                        '.html';\r\n                    return (\r\n                        <div\r\n                            key={post.id}\r\n                            className=\"col-l-12 col-12 col-s-6 post-item\"\r\n                        >\r\n                            <Link\r\n                                to={uri}\r\n                                onClick={() => this.onHandleSelectPost(post)}\r\n                            >\r\n                                <div className=\"img\">\r\n                                    <img\r\n                                        src={post.images[0]}\r\n                                        alt={post.title}\r\n                                    />\r\n                                </div>\r\n                                <Typography\r\n                                    className=\"card-title\"\r\n                                    gutterBottom\r\n                                    variant=\"h5\"\r\n                                    component=\"h4\"\r\n                                >\r\n                                    {post.title}\r\n                                </Typography>\r\n                                {post.price && (\r\n                                    <div className=\"price\">\r\n                                        {post.price}\r\n                                        {post.currency && (\r\n                                            <span className=\"currency\">\r\n                                                {post.currency}\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </Link>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLatestPosts.propTypes = {\r\n    latestPosts: PropTypes.object.isRequired,\r\n    onHandleSelectPost: PropTypes.func.isRequired,\r\n    getLatestPosts: PropTypes.func.isRequired,\r\n    selectedPost: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\r\n        .isRequired\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    latestPosts: makeSelectLatestPosts()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getLatestPosts\r\n};\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\nconst withReducer = injectReducer({ key: 'detailReducer', reducer });\r\nconst withSaga = injectSaga({ key: 'detailSaga', saga });\r\n\r\nexport default compose(\r\n    withReducer,\r\n    withSaga,\r\n    withConnect\r\n)(LatestPosts);\r\n","import initialState from './initialState';\r\nimport * as consts from './consts';\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case consts.GET_POSTS_REQUEST:\r\n            return state\r\n                .setIn(['posts', 'waiting'], true)\r\n                .setIn(['posts', 'error'], false);\r\n        case consts.GET_POSTS_SUCCESS:\r\n            return state\r\n                .setIn(['posts', 'waiting'], false)\r\n                .setIn(['posts', 'error'], false)\r\n                .updateIn(['posts', 'data'], obj => ({\r\n                    ...obj,\r\n                    [action.posts.category]: action.posts.data\r\n                }));\r\n        case consts.GET_POSTS_ERROR:\r\n            return state\r\n                .setIn(['posts', 'waiting'], false)\r\n                .setIn(['posts', 'error'], action.error)\r\n                .setIn(['posts', 'data'], false);\r\n        case consts.RESET_POSTS:\r\n            return state.setIn(['posts', 'data'], false);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { put, call, all, takeEvery } from 'redux-saga/effects';\r\nimport services from '../../services/bloggerAPIs';\r\nimport * as consts from './consts';\r\nimport { setNextPageToken } from '../Home/actions';\r\nimport utils from '../../utils';\r\n\r\nfunction* getPostsSaga({ payload }) {\r\n    try {\r\n        const posts = yield call(services.getPosts, payload);\r\n        const postsIncludedImages = utils.getImages(posts.data.items);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        const postsIncludedProductInfo = utils.getProductInfo(\r\n            postsIncludedCurrency\r\n        );\r\n        let nextPageToken = null;\r\n        if (posts.data.nextPageToken) {\r\n            nextPageToken = posts.data.nextPageToken;\r\n        }\r\n        yield all([\r\n            put({\r\n                type: consts.GET_POSTS_SUCCESS,\r\n                posts: {\r\n                    data: postsIncludedProductInfo,\r\n                    category: payload.label\r\n                }\r\n            }),\r\n            put(setNextPageToken(nextPageToken))\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_POSTS_ERROR,\r\n            error: error\r\n        });\r\n        yield put(setNextPageToken(null));\r\n    }\r\n}\r\n\r\nexport default function* root() {\r\n    yield takeEvery(consts.GET_POSTS_REQUEST, getPostsSaga);\r\n}\r\n","import { createSelector } from 'reselect';\r\nimport initialState from './initialState';\r\n\r\nconst labelsSelector = state => state.get('labelsReducer', initialState);\r\n\r\nconst makeSelectPosts = () =>\r\n    createSelector(\r\n        labelsSelector,\r\n        state => state.get('posts').toJS()\r\n    );\r\n\r\nexport { makeSelectPosts };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport cloneDeep from 'lodash.clonedeep';\r\n\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport Utils from '../../utils';\r\nimport { resetSelectedPost } from './actions';\r\nimport { limitOtherPosts } from '../../configs';\r\nimport { makeSelectSamePosts, makeSelectSelectedPost } from './selectors';\r\n\r\nimport LoadingComponent from '../../components/commons/LoadingComponent';\r\n\r\nclass SamePosts extends Component {\r\n    componentDidMount() {}\r\n\r\n    onHandleSelectPost = post => {\r\n        const { onHandleSelectPost, resetSelectedPost } = this.props;\r\n        resetSelectedPost();\r\n        onHandleSelectPost(post);\r\n    };\r\n\r\n    render() {\r\n        const { samePosts, selectedPost } = this.props;\r\n        let samePostsFiltered = [];\r\n        if (samePosts.waiting) {\r\n            return (\r\n                <Grid container spacing={32} className=\"other-post\">\r\n                    <LoadingComponent />\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        if (samePosts.data) {\r\n            const samePostsCloned = cloneDeep(samePosts.data);\r\n            samePostsFiltered = samePostsCloned.filter(\r\n                post => post.id !== selectedPost.id\r\n            );\r\n\r\n            if (samePostsFiltered.length > limitOtherPosts) {\r\n                samePostsFiltered = samePostsFiltered.pop();\r\n            }\r\n        }\r\n\r\n        if (samePostsFiltered.length <= 0) {\r\n            return (\r\n                <Grid container spacing={32} className=\"other-post\">\r\n                    <Grid item className=\"col-l-12 col-12 col-s-12 post-item\">\r\n                        No data available\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"latest-post\">\r\n                {samePostsFiltered.map(post => {\r\n                    const postUrl = Utils.convertStringToURL(post.title);\r\n                    const uri =\r\n                        '/' +\r\n                        post.labels[0] +\r\n                        '/' +\r\n                        postUrl +\r\n                        '-idpx' +\r\n                        post.id +\r\n                        '.html';\r\n                    return (\r\n                        <div\r\n                            key={post.id}\r\n                            className=\"col-l-12 col-12 col-s-6 post-item\"\r\n                        >\r\n                            <Link\r\n                                to={uri}\r\n                                onClick={() => this.onHandleSelectPost(post)}\r\n                            >\r\n                                <div className=\"img\">\r\n                                    <img\r\n                                        src={post.images[0]}\r\n                                        alt={post.title}\r\n                                    />\r\n                                </div>\r\n                                <Typography\r\n                                    className=\"card-title\"\r\n                                    gutterBottom\r\n                                    variant=\"h5\"\r\n                                    component=\"h4\"\r\n                                >\r\n                                    {post.title}\r\n                                </Typography>\r\n                                {post.price && (\r\n                                    <div className=\"price\">\r\n                                        {post.price}\r\n                                        {post.currency && (\r\n                                            <span className=\"currency\">\r\n                                                {post.currency}\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </Link>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nSamePosts.propTypes = {\r\n    samePosts: PropTypes.object.isRequired,\r\n    onHandleSelectPost: PropTypes.func.isRequired,\r\n    resetSelectedPost: PropTypes.func.isRequired,\r\n    selectedPost: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\r\n        .isRequired\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    samePosts: makeSelectSamePosts(),\r\n    selectedPost: makeSelectSelectedPost()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    resetSelectedPost\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SamePosts);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { FacebookProvider, Comments } from 'react-facebook';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { fb_app_id } from '../configs';\r\n\r\nclass FBComments extends Component {\r\n    render() {\r\n        const { url } = this.props;\r\n        if (url) {\r\n            return (\r\n                <Grid className=\"comment-box\">\r\n                    <FacebookProvider appId={fb_app_id}>\r\n                        <Comments href={url} width=\"100%\" />\r\n                    </FacebookProvider>\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n// Define PropTypes\r\nFBComments.propTypes = {\r\n    url: PropTypes.string.isRequired\r\n};\r\n\r\nFBComments.defaultProps = {};\r\n\r\nexport default FBComments;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\n\r\nimport {\r\n    CarouselProvider,\r\n    Slider,\r\n    Slide,\r\n    ImageWithZoom,\r\n    Dot\r\n} from 'pure-react-carousel';\r\nimport 'pure-react-carousel/dist/react-carousel.es.css';\r\n\r\nclass ImgSlider extends Component {\r\n    render() {\r\n        const { imgs } = this.props;\r\n        return (\r\n            <CarouselProvider\r\n                naturalSlideWidth={100}\r\n                naturalSlideHeight={70}\r\n                totalSlides={imgs.length}\r\n            >\r\n                <Slider>\r\n                    {imgs.map((img, index) => {\r\n                        return (\r\n                            <Slide key={index} index={0}>\r\n                                <ImageWithZoom\r\n                                    src={img}\r\n                                    alt=\"\"\r\n                                    hasMasterSpinner\r\n                                />\r\n                            </Slide>\r\n                        );\r\n                    })}\r\n                </Slider>\r\n                <div className=\"thumbs\">\r\n                    {imgs.map((img, index) => {\r\n                        return (\r\n                            <Dot key={index} slide={index}>\r\n                                <img src={img} alt=\"\" />\r\n                            </Dot>\r\n                        );\r\n                    })}\r\n                </div>\r\n            </CarouselProvider>\r\n        );\r\n    }\r\n}\r\n\r\n// Define PropTypes\r\nImgSlider.propTypes = {\r\n    imgs: PropTypes.array.isRequired\r\n};\r\n\r\nconst mapStateToProps = () => ({});\r\n\r\nconst mapDispatchToProps = {};\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\nexport default compose(withConnect)(ImgSlider);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport renderHTML from 'react-render-html';\r\nimport { Helmet } from 'react-helmet';\r\nimport { compose } from 'redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport utils from '../../utils';\r\nimport { getSamePosts, selectPost } from './actions';\r\nimport { limitOtherPosts, fb_app_id } from '../../configs';\r\nimport Comments from '../Comments';\r\nimport Loading from '../../components/commons/Loading';\r\n\r\nimport ogImg from '../../assets/images/og-img.jpg';\r\n\r\nimport { makeSelectPost } from './selectors';\r\n\r\nimport injectReducer from '../../utils/injectReducer';\r\nimport injectSaga from '../../utils/injectSaga';\r\n\r\nimport reducer from './reducer';\r\nimport saga from './saga';\r\nimport ImgSlider from './ImgSlider';\r\n\r\nclass Detail extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            PageNoFound: false\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        const { post } = this.props;\r\n\r\n        if (!post.data) {\r\n            this.getSelectedPost();\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { post, getSamePosts } = this.props;\r\n        if (!post.waiting) {\r\n            if (post.data) {\r\n                if (post.data.id !== prevProps.post.data.id) {\r\n                    getSamePosts({\r\n                        label: post.data.labels[0],\r\n                        limit: limitOtherPosts\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.timeoutID);\r\n    }\r\n\r\n    setPageNotFound = () => {\r\n        this.setState({ PageNoFound: true });\r\n    };\r\n\r\n    getSelectedPost = () => {\r\n        const { match } = this.props;\r\n        const url = match.params.id;\r\n        if (url) {\r\n            const postId = utils.getIdFromURL(url);\r\n            const { selectPost } = this.props;\r\n            selectPost(postId);\r\n        } else {\r\n            this.setPageNotFound();\r\n        }\r\n    };\r\n\r\n    handleSelectPost = selectedPost => {\r\n        const { selectPost } = this.props;\r\n        selectPost(selectedPost.id);\r\n    };\r\n\r\n    render() {\r\n        const { post } = this.props;\r\n        const { PageNoFound } = this.state;\r\n\r\n        if (post.waiting) {\r\n            return (\r\n                <div className=\"loading-wrp\">\r\n                    <Loading size={30} />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        if (PageNoFound) {\r\n            return (\r\n                <Grid container className=\"detail\">\r\n                    <Grid container>\r\n                        <h2>Page not found! :(</h2>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        if (post.data) {\r\n            return (\r\n                <Grid container className=\"detail\">\r\n                    <Helmet\r\n                        titleTemplate={post.data.labels[0] + ' | %s'}\r\n                        title={post.data.title}\r\n                    />\r\n                    <Helmet>\r\n                        <meta name=\"description\" content={post.data.title} />\r\n                        <meta\r\n                            property=\"og:url\"\r\n                            content={window.location.href}\r\n                        />\r\n                        <meta property=\"og:type\" content=\"article\" />\r\n                        <meta property=\"og:title\" content={post.data.title} />\r\n                        <meta\r\n                            property=\"og:image\"\r\n                            content={\r\n                                post.data.images[0]\r\n                                    ? post.data.images[0]\r\n                                    : ogImg\r\n                            }\r\n                        />\r\n                        <meta\r\n                            property=\"og:description\"\r\n                            content={post.data.title}\r\n                        />\r\n                        <meta property=\"fb:app_id\" content={fb_app_id} />\r\n                        <link rel=\"canonical\" href={window.location.href} />\r\n                    </Helmet>\r\n                    <Grid container className=\"detail-wrp\">\r\n                        <Grid item xs={12} className=\"detail-header\">\r\n                            <h1>{post.data.title}</h1>\r\n                        </Grid>\r\n                        <Grid className=\"detail-left\">\r\n                            <div className=\"top-detail\">\r\n                                <div className=\"slider\">\r\n                                    <ImgSlider imgs={post.data.images} />\r\n                                </div>\r\n                                <div className=\"product-info-w\">\r\n                                    {renderHTML(post.data.productInfo)}\r\n                                </div>\r\n                            </div>\r\n                            <Grid className=\"detail-content\">\r\n                                {renderHTML(post.data.content)}\r\n                            </Grid>\r\n                            <Grid container>\r\n                                <Comments\r\n                                    title={post.data.title}\r\n                                    url={window.location.href}\r\n                                    postId={post.data.id}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        } else {\r\n            return (\r\n                <Grid container className=\"detail\">\r\n                    <Grid container>\r\n                        <h2>No data available! :(</h2>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// Define PropTypes\r\nDetail.propTypes = {\r\n    post: PropTypes.object.isRequired,\r\n    selectPost: PropTypes.func.isRequired,\r\n    getSamePosts: PropTypes.func.isRequired,\r\n    match: PropTypes.object.isRequired\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    post: makeSelectPost()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    selectPost,\r\n    getSamePosts\r\n};\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\nconst withReducer = injectReducer({ key: 'detailReducer', reducer });\r\nconst withSaga = injectSaga({ key: 'detailSaga', saga });\r\n\r\nexport default compose(\r\n    withReducer,\r\n    withSaga,\r\n    withConnect\r\n)(Detail);\r\n","import { fromJS } from 'immutable';\r\n\r\nexport default fromJS({\r\n    samePosts: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    post: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    latestPosts: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    selectedPost: false\r\n});\r\n","import initialState from './initialState';\r\nimport * as consts from './consts';\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case consts.GET_SAME_POSTS_REQUEST:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], true)\r\n                .setIn(['samePosts', 'error'], false);\r\n        case consts.GET_SAME_POSTS_SUCCESS:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], false)\r\n                .setIn(['samePosts', 'error'], false)\r\n                .setIn(['samePosts', 'data'], action.samePosts);\r\n        case consts.GET_SAME_POSTS_ERROR:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], false)\r\n                .setIn(['samePosts', 'error'], action.error)\r\n                .setIn(['samePosts', 'data'], false);\r\n        case consts.GET_LATEST_POSTS_REQUEST:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], true)\r\n                .setIn(['latestPosts', 'error'], false);\r\n        case consts.GET_LATEST_POSTS_SUCCESS:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], false)\r\n                .setIn(['latestPosts', 'error'], false)\r\n                .setIn(['latestPosts', 'data'], action.latestPosts);\r\n        case consts.GET_LATEST_POSTS_ERROR:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], false)\r\n                .setIn(['latestPosts', 'error'], action.error)\r\n                .setIn(['latestPosts', 'data'], false);\r\n        case consts.GET_SELECTED_POST_REQUEST:\r\n            return state\r\n                .setIn(['post', 'waiting'], true)\r\n                .setIn(['post', 'error'], false)\r\n                .set('selectedPost', false);\r\n        case consts.GET_SELECTED_POST_SUCCESS:\r\n            return state\r\n                .setIn(['post', 'waiting'], false)\r\n                .setIn(['post', 'error'], false)\r\n                .setIn(['post', 'data'], action.post)\r\n                .set('selectedPost', action.post);\r\n        case consts.GET_SELECTED_POST_ERROR:\r\n            return state\r\n                .setIn(['post', 'waiting'], false)\r\n                .setIn(['post', 'error'], action.error)\r\n                .setIn(['post', 'data'], false)\r\n                .set('selectedPost', false);\r\n        case consts.RESET_SELECTED_POST:\r\n            return state.setIn(['post', 'data'], false);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { put, call, all, takeLatest } from 'redux-saga/effects';\r\nimport services from '../../services/bloggerAPIs';\r\nimport * as consts from './consts';\r\nimport utils from '../../utils';\r\n\r\nfunction* getSamePostsSaga({ payload }) {\r\n    try {\r\n        const samePosts = yield call(services.getPosts, payload);\r\n        const postsIncludedImages = utils.getImages(samePosts.data.items);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        const postsIncludedProductInfo = utils.getProductInfo(\r\n            postsIncludedCurrency\r\n        );\r\n        yield all([\r\n            put({\r\n                type: consts.GET_SAME_POSTS_SUCCESS,\r\n                samePosts: postsIncludedProductInfo\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_SAME_POSTS_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* getLatestPostsSaga() {\r\n    try {\r\n        const latestPosts = yield call(services.getLatestPost);\r\n        const postsIncludedImages = utils.getImages(latestPosts.data.items);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        const postsIncludedProductInfo = utils.getProductInfo(\r\n            postsIncludedCurrency\r\n        );\r\n        yield all([\r\n            put({\r\n                type: consts.GET_LATEST_POSTS_SUCCESS,\r\n                latestPosts: postsIncludedProductInfo\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_LATEST_POSTS_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport function* getSelectedPostSaga({ payload }) {\r\n    try {\r\n        const post = yield call(services.getSelectedPost, payload);\r\n        const postsIncludedImages = utils.getImages([post.data]);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        const postsIncludedProductInfo = utils.getProductInfo(\r\n            postsIncludedCurrency\r\n        );\r\n        yield all([\r\n            put({\r\n                type: consts.GET_SELECTED_POST_SUCCESS,\r\n                post: postsIncludedProductInfo[0]\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_SELECTED_POST_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport default function* root() {\r\n    yield takeLatest(consts.GET_SAME_POSTS_REQUEST, getSamePostsSaga);\r\n    yield takeLatest(consts.GET_SELECTED_POST_REQUEST, getSelectedPostSaga);\r\n    yield takeLatest(consts.GET_LATEST_POSTS_REQUEST, getLatestPostsSaga);\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst styles = {\r\n    root: {\r\n        flexGrow: 1\r\n    }\r\n};\r\n\r\nfunction LoadingComponent(props) {\r\n    const { classes } = props;\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color=\"secondary\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nLoadingComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(LoadingComponent);\r\n","import { fromJS } from 'immutable';\r\n\r\nexport default fromJS({\r\n    posts: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    }\r\n});\r\n"],"sourceRoot":""}