{"version":3,"sources":["containers/Detail/selectors.js","containers/Detail/initialState.js","containers/Detail/reducer.js","containers/Detail/saga.js","components/commons/LoadingComponent.js","containers/Detail/LatestPosts.js"],"names":["__webpack_require__","d","__webpack_exports__","makeSelectSamePosts","makeSelectPost","makeSelectLatestPosts","makeSelectSelectedPost","reselect__WEBPACK_IMPORTED_MODULE_0__","_initialState__WEBPACK_IMPORTED_MODULE_1__","detailSelector","state","get","initialState","createSelector","toJS","immutable__WEBPACK_IMPORTED_MODULE_0__","fromJS","samePosts","waiting","error","data","post","latestPosts","selectedPost","_initialState__WEBPACK_IMPORTED_MODULE_0__","_consts__WEBPACK_IMPORTED_MODULE_1__","arguments","length","undefined","action","type","consts","setIn","set","getSamePostsSaga","getLatestPostsSaga","getSelectedPostSaga","root","_ref","payload","postsIncludedImages","postsIncludedPrice","postsIncludedCurrency","C_Users_hieuh_Desktop_Projects_xtsp_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","wrap","_context","prev","next","call","services","getPosts","sent","utils","getImages","items","getPrice","getCurrency","all","put","t0","response","stop","_marked","_context2","getLatestPost","_marked2","_ref2","_context3","getSelectedPost","_marked3","_context4","takeLatest","_marked4","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_material_ui_core_styles__WEBPACK_IMPORTED_MODULE_1__","_material_ui_core_LinearProgress__WEBPACK_IMPORTED_MODULE_2__","_material_ui_core_LinearProgress__WEBPACK_IMPORTED_MODULE_2___default","withStyles","flexGrow","props","classes","createElement","className","color","LatestPosts","onHandleSelectPost","_this","getLatestPosts","this","_this2","_this$props","latestPostsFiltered","react__WEBPACK_IMPORTED_MODULE_5___default","_material_ui_core_Grid__WEBPACK_IMPORTED_MODULE_10___default","container","spacing","_components_commons_LoadingComponent__WEBPACK_IMPORTED_MODULE_15__","cloneDeep","filter","id","pop","map","postUrl","Utils","convertStringToURL","title","uri","labels","key","react_router_dom__WEBPACK_IMPORTED_MODULE_7__","to","onClick","src","images","alt","_material_ui_core_Typography__WEBPACK_IMPORTED_MODULE_11___default","gutterBottom","variant","component","price","currency","Component","mapStateToProps","createStructuredSelector","mapDispatchToProps","withConnect","connect","withReducer","injectReducer","reducer","withSaga","injectSaga","saga","compose"],"mappings":"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","file":"static/js/17.015e2b49.chunk.js","sourcesContent":["import { createSelector } from 'reselect';\r\nimport initialState from './initialState';\r\n\r\nconst detailSelector = state => state.get('detailReducer', initialState);\r\n\r\nconst makeSelectSamePosts = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('samePosts').toJS()\r\n    );\r\n\r\nconst makeSelectPost = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('post').toJS()\r\n    );\r\n\r\nconst makeSelectLatestPosts = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('latestPosts').toJS()\r\n    );\r\n\r\nconst makeSelectSelectedPost = () =>\r\n    createSelector(\r\n        detailSelector,\r\n        state => state.get('selectedPost')\r\n    );\r\n\r\nexport {\r\n    makeSelectSamePosts,\r\n    makeSelectPost,\r\n    makeSelectLatestPosts,\r\n    makeSelectSelectedPost\r\n};\r\n","import { fromJS } from 'immutable';\r\n\r\nexport default fromJS({\r\n    samePosts: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    post: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    latestPosts: {\r\n        waiting: false,\r\n        error: false,\r\n        data: false\r\n    },\r\n    selectedPost: false\r\n});\r\n","import initialState from './initialState';\r\nimport * as consts from './consts';\r\n\r\nexport default function(state = initialState, action) {\r\n    switch (action.type) {\r\n        case consts.GET_SAME_POSTS_REQUEST:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], true)\r\n                .setIn(['samePosts', 'error'], false);\r\n        case consts.GET_SAME_POSTS_SUCCESS:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], false)\r\n                .setIn(['samePosts', 'error'], false)\r\n                .setIn(['samePosts', 'data'], action.samePosts);\r\n        case consts.GET_SAME_POSTS_ERROR:\r\n            return state\r\n                .setIn(['samePosts', 'waiting'], false)\r\n                .setIn(['samePosts', 'error'], action.error)\r\n                .setIn(['samePosts', 'data'], false);\r\n        case consts.GET_LATEST_POSTS_REQUEST:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], true)\r\n                .setIn(['latestPosts', 'error'], false);\r\n        case consts.GET_LATEST_POSTS_SUCCESS:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], false)\r\n                .setIn(['latestPosts', 'error'], false)\r\n                .setIn(['latestPosts', 'data'], action.latestPosts);\r\n        case consts.GET_LATEST_POSTS_ERROR:\r\n            return state\r\n                .setIn(['latestPosts', 'waiting'], false)\r\n                .setIn(['latestPosts', 'error'], action.error)\r\n                .setIn(['latestPosts', 'data'], false);\r\n        case consts.GET_SELECTED_POST_REQUEST:\r\n            return state\r\n                .setIn(['post', 'waiting'], true)\r\n                .setIn(['post', 'error'], false)\r\n                .set('selectedPost', false);\r\n        case consts.GET_SELECTED_POST_SUCCESS:\r\n            return state\r\n                .setIn(['post', 'waiting'], false)\r\n                .setIn(['post', 'error'], false)\r\n                .setIn(['post', 'data'], action.post)\r\n                .set('selectedPost', action.post);\r\n        case consts.GET_SELECTED_POST_ERROR:\r\n            return state\r\n                .setIn(['post', 'waiting'], false)\r\n                .setIn(['post', 'error'], action.error)\r\n                .setIn(['post', 'data'], false)\r\n                .set('selectedPost', false);\r\n        case consts.RESET_SELECTED_POST:\r\n            return state.setIn(['post', 'data'], false);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { put, call, all, takeLatest } from 'redux-saga/effects';\r\nimport services from '../../services/bloggerAPIs';\r\nimport * as consts from './consts';\r\nimport utils from '../../utils';\r\n\r\nfunction* getSamePostsSaga({ payload }) {\r\n    try {\r\n        const samePosts = yield call(services.getPosts, payload);\r\n        const postsIncludedImages = utils.getImages(samePosts.data.items);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        yield all([\r\n            put({\r\n                type: consts.GET_SAME_POSTS_SUCCESS,\r\n                samePosts: postsIncludedCurrency\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_SAME_POSTS_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nfunction* getLatestPostsSaga() {\r\n    try {\r\n        const latestPosts = yield call(services.getLatestPost);\r\n        const postsIncludedImages = utils.getImages(latestPosts.data.items);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        yield all([\r\n            put({\r\n                type: consts.GET_LATEST_POSTS_SUCCESS,\r\n                latestPosts: postsIncludedCurrency\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_LATEST_POSTS_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport function* getSelectedPostSaga({ payload }) {\r\n    try {\r\n        const post = yield call(services.getSelectedPost, payload);\r\n        const postsIncludedImages = utils.getImages([post.data]);\r\n        const postsIncludedPrice = utils.getPrice(postsIncludedImages);\r\n        const postsIncludedCurrency = utils.getCurrency(postsIncludedPrice);\r\n        yield all([\r\n            put({\r\n                type: consts.GET_SELECTED_POST_SUCCESS,\r\n                post: postsIncludedCurrency[0]\r\n            })\r\n        ]);\r\n    } catch (error) {\r\n        yield put({\r\n            type: consts.GET_SELECTED_POST_ERROR,\r\n            error: error.response.data\r\n        });\r\n    }\r\n}\r\n\r\nexport default function* root() {\r\n    yield takeLatest(consts.GET_SAME_POSTS_REQUEST, getSamePostsSaga);\r\n    yield takeLatest(consts.GET_SELECTED_POST_REQUEST, getSelectedPostSaga);\r\n    yield takeLatest(consts.GET_LATEST_POSTS_REQUEST, getLatestPostsSaga);\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst styles = {\r\n    root: {\r\n        flexGrow: 1\r\n    }\r\n};\r\n\r\nfunction LoadingComponent(props) {\r\n    const { classes } = props;\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgress color=\"secondary\" />\r\n        </div>\r\n    );\r\n}\r\n\r\nLoadingComponent.propTypes = {\r\n    classes: PropTypes.object.isRequired\r\n};\r\n\r\nexport default withStyles(styles)(LoadingComponent);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport cloneDeep from 'lodash.clonedeep';\r\nimport { compose } from 'redux';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport Utils from '../../utils';\r\nimport { makeSelectLatestPosts } from './selectors';\r\n\r\nimport LoadingComponent from '../../components/commons/LoadingComponent';\r\n\r\nimport { getLatestPosts } from './actions';\r\n\r\nimport injectReducer from '../../utils/injectReducer';\r\nimport injectSaga from '../../utils/injectSaga';\r\nimport reducer from './reducer';\r\nimport saga from './saga';\r\n\r\nclass LatestPosts extends Component {\r\n    componentDidMount() {\r\n        const { getLatestPosts } = this.props;\r\n        getLatestPosts();\r\n    }\r\n\r\n    onHandleSelectPost = post => {\r\n        const { onHandleSelectPost } = this.props;\r\n        onHandleSelectPost(post);\r\n    };\r\n\r\n    render() {\r\n        const { latestPosts, selectedPost } = this.props;\r\n        let latestPostsFiltered = [];\r\n\r\n        if (latestPosts.waiting) {\r\n            return (\r\n                <Grid container spacing={32} className=\"latest-post\">\r\n                    <LoadingComponent />\r\n                </Grid>\r\n            );\r\n        }\r\n\r\n        if (latestPosts.data) {\r\n            if (selectedPost) {\r\n                const latestPostsCloned = cloneDeep(latestPosts.data);\r\n                latestPostsFiltered = latestPostsCloned.filter(\r\n                    post => post.id !== selectedPost.id\r\n                );\r\n\r\n                if (latestPostsFiltered.length > 10) {\r\n                    latestPostsFiltered = latestPostsFiltered.pop();\r\n                }\r\n            } else {\r\n                latestPostsFiltered = latestPosts.data;\r\n            }\r\n        }\r\n\r\n        if (latestPostsFiltered.length <= 0) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"latest-post\">\r\n                {latestPostsFiltered.map(post => {\r\n                    const postUrl = Utils.convertStringToURL(post.title);\r\n                    const uri =\r\n                        '/' +\r\n                        post.labels[0] +\r\n                        '/' +\r\n                        postUrl +\r\n                        '-idpx' +\r\n                        post.id +\r\n                        '.html';\r\n                    return (\r\n                        <div\r\n                            key={post.id}\r\n                            className=\"col-l-12 col-12 col-s-6 post-item\"\r\n                        >\r\n                            <Link\r\n                                to={uri}\r\n                                onClick={() => this.onHandleSelectPost(post)}\r\n                            >\r\n                                <div className=\"img\">\r\n                                    <img\r\n                                        src={post.images[0]}\r\n                                        alt={post.title}\r\n                                    />\r\n                                </div>\r\n                                <Typography\r\n                                    className=\"card-title\"\r\n                                    gutterBottom\r\n                                    variant=\"h5\"\r\n                                    component=\"h4\"\r\n                                >\r\n                                    {post.title}\r\n                                </Typography>\r\n                                {post.price && (\r\n                                    <div className=\"price\">\r\n                                        {post.price}\r\n                                        {post.currency && (\r\n                                            <span className=\"currency\">\r\n                                                {post.currency}\r\n                                            </span>\r\n                                        )}\r\n                                    </div>\r\n                                )}\r\n                            </Link>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nLatestPosts.propTypes = {\r\n    latestPosts: PropTypes.object.isRequired,\r\n    onHandleSelectPost: PropTypes.func.isRequired,\r\n    getLatestPosts: PropTypes.func.isRequired,\r\n    selectedPost: PropTypes.oneOfType([PropTypes.bool, PropTypes.object])\r\n        .isRequired\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    latestPosts: makeSelectLatestPosts()\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    getLatestPosts\r\n};\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n);\r\n\r\nconst withReducer = injectReducer({ key: 'detailReducer', reducer });\r\nconst withSaga = injectSaga({ key: 'detailSaga', saga });\r\n\r\nexport default compose(\r\n    withReducer,\r\n    withSaga,\r\n    withConnect\r\n)(LatestPosts);\r\n"],"sourceRoot":""}